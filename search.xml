<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>top</title>
    <url>/2021/04/04/top/</url>
    <content><![CDATA[<p>该文章是置顶文章</p>
]]></content>
  </entry>
  <entry>
    <title>Spring入门day02</title>
    <url>/2021/04/01/Spring%E5%85%A5%E9%97%A8day02/</url>
    <content><![CDATA[<h2 id="Spring-入门案例"><a href="#Spring-入门案例" class="headerlink" title="Spring 入门案例"></a>Spring 入门案例</h2><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建spring容器-xml文件"><a href="#创建spring容器-xml文件" class="headerlink" title="创建spring容器(xml文件)"></a>创建spring容器(xml文件)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在这里定义bean对象 --&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建service对象"><a href="#创建service对象" class="headerlink" title="创建service对象"></a>创建service对象</h4><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331200533453.png" alt="image-20210331200533453"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImp</span> <span class="keyword">implements</span> <span class="title">TestService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好帅~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将该对象注入到spring容器中"><a href="#将该对象注入到spring容器中" class="headerlink" title="将该对象注入到spring容器中"></a>将该对象注入到spring容器中</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.TestServiceImp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取ApplicationContext-对象"><a href="#获取ApplicationContext-对象" class="headerlink" title="获取ApplicationContext 对象"></a>获取ApplicationContext 对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="获取对象并调用方法"><a href="#获取对象并调用方法" class="headerlink" title="获取对象并调用方法"></a>获取对象并调用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.service.TestService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        TestService testService = (TestService) applicationContext.getBean(<span class="string">&quot;testService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        testService.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="获取ApplicationContext组件的三种方式"><a href="#获取ApplicationContext组件的三种方式" class="headerlink" title="获取ApplicationContext组件的三种方式"></a>获取ApplicationContext组件的三种方式</h2><h4 id="按照组件id取"><a href="#按照组件id取" class="headerlink" title="按照组件id取"></a>按照组件id取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestService testService = (TestService) applicationContext.getBean(<span class="string">&quot;testService&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="按照组件类型取-该组件类型只包含一个类的时候"><a href="#按照组件类型取-该组件类型只包含一个类的时候" class="headerlink" title="按照组件类型取(该组件类型只包含一个类的时候)"></a>按照组件类型取(该组件类型只包含一个类的时候)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestService testService2 = (TestService) applicationContext.getBean(TestService.class);</span><br></pre></td></tr></table></figure>



<h4 id="按照组件id-类型取"><a href="#按照组件id-类型取" class="headerlink" title="按照组件id+类型取"></a>按照组件id+类型取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestService testService3 = (TestService) applicationContext.getBean(<span class="string">&quot;testService2&quot;</span>, TestService.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="入门案例2-通过property建立组件之间的依赖关系"><a href="#入门案例2-通过property建立组件之间的依赖关系" class="headerlink" title="入门案例2(通过property建立组件之间的依赖关系)"></a>入门案例2(通过property建立组件之间的依赖关系)</h2><h4 id="Spring-xml-中的写法"><a href="#Spring-xml-中的写法" class="headerlink" title="Spring.xml 中的写法"></a>Spring.xml 中的写法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.TestServiceImp&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;usermapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;usermapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>property中name标签对应TestServiceImpl中的setMapper方法，ref对应依赖对象的bean标签id。若要建立依赖的成员变量为基本类型，则ref改为value，value中写成员变量的值。</strong></p>
<h4 id="UserMapperImpl-java"><a href="#UserMapperImpl-java" class="headerlink" title="UserMapperImpl.java"></a>UserMapperImpl.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天你吃了吗？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="TestServiceImpl-java"><a href="#TestServiceImpl-java" class="headerlink" title="TestServiceImpl.java"></a>TestServiceImpl.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImp</span> <span class="keyword">implements</span> <span class="title">TestService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserMapper usermapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMapper</span><span class="params">(UserMapper usermapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usermapper = usermapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        usermapper.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="BeanFactory容器接口"><a href="#BeanFactory容器接口" class="headerlink" title="BeanFactory容器接口"></a>BeanFactory容器接口</h2><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331211918041.png" alt="image-20210331211918041"></p>
<h2 id="Bean的实例化方式"><a href="#Bean的实例化方式" class="headerlink" title="Bean的实例化方式"></a>Bean的实例化方式</h2><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h5><p>获得bean组件，默认使用的方式就是无参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;usermapper&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>



<h5 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userMapperz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;orderMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;orderMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;parameter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.mapper.UserMapperImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.mapper.OrderMapperImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>constructor-arg标签中name对应构造方法中的形参名，ref对应组件id，value则为基本类型的值</strong></p>
<p>UserServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line">    String parameter;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserMapper userMapperz, OrderMapper orderMapper,String parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapperz;</span><br><span class="line">        <span class="keyword">this</span>.orderMapper = orderMapper;</span><br><span class="line">        <span class="keyword">this</span>.parameter = parameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h4><h5 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h5><p>StaticFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFromStaticFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>factory-method: 对应当前class的方法名</strong></p>
<h5 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h5><p>InstanceFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.factory.InstanceFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFromInstanceFactory&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>实例工厂先注册工厂组件，然后在配置工厂组件。factory-bean对应工厂组件id，factory-method 对应工厂中生成实例的方法名。</strong></p>
<h5 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h5><p>BeanFactory和FactoryBean之间的异同：</p>
<p>BeanFactory与FactoryBean均为接口，他们都提供了生产Bean实例的方法。</p>
<p>BeanFactory接口的继承关系在上述图片中有展示。FactoryBean中则提供了getObject()方法用来返回生产的组件对象。<img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331214559356.png" alt="image-20210331214559356"></p>
<p>下面是FactoryBean接口的使用：</p>
<p>UserFactoryBean.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cskaoyan.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cskaoyan.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用到factoryBean的getObject方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFromFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.factory.UserFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取FactoryBean生产的User实例</span></span><br><span class="line">Object userFromFactoryBean = applicationContext.getBean(<span class="string">&quot;userFromFactoryBean&quot;</span>);</span><br></pre></td></tr></table></figure>





<h2 id="组件的作用域-Scope"><a href="#组件的作用域-Scope" class="headerlink" title="组件的作用域(Scope)"></a>组件的作用域(Scope)</h2><p>singleton：组件在容器中以单例的形式存在</p>
<p>prototype:  每一次获得组件的时候都去获得一个新的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;userService1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.cskaoyan.service.UserService1&quot;</span> scope=<span class="string">&quot;singleton&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.cskaoyan.service.UserService2&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService3&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.cskaoyan.service.UserService3&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>不加scope属性则默认为singleton</strong></p>
<h2 id="生命周期-组件到达可用状态经历的过程"><a href="#生命周期-组件到达可用状态经历的过程" class="headerlink" title="生命周期(组件到达可用状态经历的过程)"></a>生命周期(组件到达可用状态经历的过程)</h2><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331234346810.png" alt="image-20210331234346810"></p>
<p>当组件到达可用状态之前，可以在如上阶段对组件进行操作(只需要实现相应的接口，进行相应的操作即可。<strong>BeanPostProcessor方法例外，它的作用域是spring容器中实现BeanPostProcessor的组件之外的其他组件</strong>)</p>
<h4 id="scope对生命周期的影响"><a href="#scope对生命周期的影响" class="headerlink" title="scope对生命周期的影响"></a>scope对生命周期的影响</h4><p>scope会影响组件到达可用状态之前的这些生命周期的执行(<strong>影响执行开始的时间</strong>)</p>
<p><strong>singleton</strong>:容器初始化的时候生命周期已经执行完毕（调用getBean方法之前已经执行完了）</p>
<p><strong>prototype</strong>:当调用getBean( )（获得组件时），才开始执行生命周期。</p>
<p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331235053372.png" alt="image-20210331235053372"></p>
<h4 id="完整的生命周期流程图"><a href="#完整的生命周期流程图" class="headerlink" title="完整的生命周期流程图"></a>完整的生命周期流程图</h4><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331235147656.png" alt="image-20210331235147656"></p>
<h4 id="给组件提供生命周期的代码示例"><a href="#给组件提供生命周期的代码示例" class="headerlink" title="给组件提供生命周期的代码示例"></a>给组件提供生命周期的代码示例</h4><p>LifeCyleBean.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleBean</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">BeanFactoryAware</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    String beanName;<span class="comment">//null 👉 通过setBeanName方法完成赋值</span></span><br><span class="line"></span><br><span class="line">    BeanFactory beanFactory;</span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifeCycleBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1、无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2、设置参数&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得该组件的name 👉 可以利用获得的组件的name给当前组件的成员变量复制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setBeanName:&quot;</span> + s);</span><br><span class="line">        <span class="keyword">this</span>.beanName = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setBeanFactory&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setApplicationContext&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterPropertiesSet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myinit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义的init方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mydestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;lifecycleBean的destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disposableBean的destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BeanPostProcessor的使用"><a href="#BeanPostProcessor的使用" class="headerlink" title="BeanPostProcessor的使用"></a>BeanPostProcessor的使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//作用范围：除了他本身，其他的所有组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//bean：当前正在生命周期的组件</span></span><br><span class="line">    <span class="comment">//beanName: 组件的名称</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">/*if (beanName.contains(&quot;datasource&quot;))&#123;</span></span><br><span class="line"><span class="comment">            DataSource dataSource = (DataSource) bean;</span></span><br><span class="line"><span class="comment">            String password = dataSource.getPassword();//密文</span></span><br><span class="line"><span class="comment">            //解密</span></span><br><span class="line"><span class="comment">            String password2 = jiemi(password);</span></span><br><span class="line"><span class="comment">            dataSource.setPassword(password2);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//传入的bean通过动态代理生成一个代理对象，return代理对象 → 狸猫换太子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;beanPostProcessor的before：&quot;</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beanPostProcessor的after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>postProcessBeforeInitialization、postProcessAfterInitialization 都是在组件可用状态之前执行的。</p>
<p>BeanPostProcessor 的作用范围是spring容器中除了它本身作用的组件之外的所有组件。</p>
<h4 id="自定义init方法与destory方法"><a href="#自定义init方法与destory方法" class="headerlink" title="自定义init方法与destory方法"></a>自定义init方法与destory方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;lifecycleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.bean.LifeCycleBean&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;myinit&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;mydestroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义初始化与销毁方法要在bean标签中进行声明，init-method与destory-method方法对应的是自定义初始化方法和销毁方法的方法名，<font color="red">方法名可以自由设定。</font></p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>使用注解对组件进行配置首先需要在xml文件中进行如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;包的全类名&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userService&quot;) //组件id为该注解的value属性值</span></span><br><span class="line"><span class="meta">@Component</span>                  <span class="comment">//组件id的默认值 → 类名的首字母小写 → userServiceImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他注解</strong>(效果与@Component是一样的)</p>
<p>@Service ：service层的组件</p>
<p>@Repository：dao层的组件</p>
<p>@Controller：controller层的组件（SpringMVC阶段才去使用）</p>
<p><strong>组件注入</strong></p>
<p>@Autowired：按照类型来进行注入</p>
<p>@Autowired + @Qualifier：当类型中不止一个类时，使用该注解</p>
<p>@Resource：使用name属性来指定组件id</p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Component(&quot;userService&quot;) //组件id为该注解的value属性值</span></span><br><span class="line"><span class="meta">@Component</span>                  <span class="comment">//组件id的默认值 → 类名的首字母小写 → userServiceImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器中该类型的组件只有一个</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userMapperImpl1&quot;)</span></span><br><span class="line">    UserMapper userMapper1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userMapperImpl2&quot;)</span> <span class="comment">//默认可以按照类型注入，可以使用name属性来指定组件id</span></span><br><span class="line">    UserMapper userMapper2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayAllHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderMapper.hello();</span><br><span class="line">        userMapper1.sayHello();</span><br><span class="line">        userMapper2.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="自定义初始化和销毁方法"><a href="#自定义初始化和销毁方法" class="headerlink" title="自定义初始化和销毁方法"></a>自定义初始化和销毁方法</h5><p>init-method：@PostConstruct</p>
<p>destroy-method：@PreDestroy</p>
<p><strong>将注解写在方法上</strong></p>
<h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h5><p>@Scope ：将作用域的值写在注解中</p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Spring单元测试中的注解"><a href="#Spring单元测试中的注解" class="headerlink" title="Spring单元测试中的注解"></a>Spring单元测试中的注解</h2><p><strong>首先应先导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>然后给Spring的单元测试配置环境</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:application.xml&quot;)</span> <span class="comment">// xml文件的路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>简单使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        userService.sayAllHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Mac环境下安装Vue</title>
    <url>/2021/03/29/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85Vue/</url>
    <content><![CDATA[<h2 id="Vue整体的开发环境"><a href="#Vue整体的开发环境" class="headerlink" title="Vue整体的开发环境"></a>Vue整体的开发环境</h2><ul>
<li><code>Homebrew</code>：Mac 系统下的包管理器，类似于 Linux 下的 apt-get，Windows 的控制面板 - 安装删除程序</li>
<li><code>Node.js</code>：JavaScript 运行环境（runtime），不同系统之间不能直接运行各种编程语言，Runtime 类似于各国会议上的同声传译</li>
<li><code>npm</code>：Nodejs 下的包管理器，类似于 Mac 下的 Homebrew</li>
<li><code>webpack</code>：Vue 的组件都是通过 <code>.vue</code> 或者像微信小程序的<code>.wxml</code> 和<code>.wcss</code> 等自定义的组件都无法被用户通过各种浏览器解析，需要被翻译打包成 js 文件</li>
<li><code>vue-cli</code>：用来生成模版的 Vue 工程，相当于按照设计好的图纸来盖房子</li>
</ul>
<h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">brew install nodejs</span><br></pre></td></tr></table></figure>

<h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install webpack -g</span><br></pre></td></tr></table></figure>

<h2 id="安装VUE脚手架"><a href="#安装VUE脚手架" class="headerlink" title="安装VUE脚手架"></a>安装VUE脚手架</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">sudo npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vue list</span><br></pre></td></tr></table></figure>

<h2 id="创建VUE项目"><a href="#创建VUE项目" class="headerlink" title="创建VUE项目"></a>创建VUE项目</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vue init webpack frontend(项目名)</span><br></pre></td></tr></table></figure>

<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>



<blockquote>
<p>安装过程中可能会因为权限问题安装报错，此事在命令前加上 sudo 获取管理员权限即可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>加载配置文件</title>
    <url>/2021/03/29/%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="写一个Mybatis工具类来记录加载配置文件的方法"><a href="#写一个Mybatis工具类来记录加载配置文件的方法" class="headerlink" title="写一个Mybatis工具类来记录加载配置文件的方法"></a>写一个Mybatis工具类来记录加载配置文件的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String drivername;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过类加载器去获取</span></span><br><span class="line">        ClassLoader classLoader = MybatisUtils.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载资源</span></span><br><span class="line">        InputStream in = classLoader.getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        drivername = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取sqlSession</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"></span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory factory = sqlSessionFactoryBuilder.build(in);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="以下两个文件都放置于resources目录下"><a href="#以下两个文件都放置于resources目录下" class="headerlink" title="以下两个文件都放置于resources目录下"></a>以下两个文件都放置于resources目录下</h4><p>Jdbc.properties</p>
<blockquote>
<p>使用<code>&lt;properties resource=&quot;jdbc.properties&quot;/&gt;</code>标签可以简化Mybatis.xml文件中配置名的书写</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mall?useSSL=false&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>Mybatis.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是Mybatis的主配置文件 上面的dtd 文件定义了这个xml文件中的标签的名字，出现的位置，顺序--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个configuration其实就是这个配置文件的头，表示这个配置文件的开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注意这个位置有有顺序的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个是一个日志的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAliases&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias type=&quot;com.cskaoyan.user.User&quot; alias=&quot;user&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/typeAliases&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--environments 这个表示我们的数据源的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--id 表示环境的名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理器 表示数据库事务交给谁去管理 , Type=JDBC表示交给JDBC去管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--数据源（连接池）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个配置的是表示我们Mybatis需要把哪个Mapper加载进来，找到mapper.xml文件的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/AdminDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/UserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/ProductDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/OrderDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/MessageDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/MallDao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;dao/PlayerMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;dao/Use1Mapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class=&quot;dao.PlayerMapper&quot;&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置了这个包名以后，我们的Mybatis会去把这个包里面的所有的配置文件加载进来--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;package name=&quot;dao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210329004016930.png" alt="image"></p>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>getResourceAsStream</tag>
        <tag>properties</tag>
      </tags>
  </entry>
</search>
