<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac环境下安装Vue</title>
    <url>/2021/03/29/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85Vue/</url>
    <content><![CDATA[<h2 id="Vue整体的开发环境"><a href="#Vue整体的开发环境" class="headerlink" title="Vue整体的开发环境"></a>Vue整体的开发环境</h2><ul>
<li><code>Homebrew</code>：Mac 系统下的包管理器，类似于 Linux 下的 apt-get，Windows 的控制面板 - 安装删除程序</li>
<li><code>Node.js</code>：JavaScript 运行环境（runtime），不同系统之间不能直接运行各种编程语言，Runtime 类似于各国会议上的同声传译</li>
<li><code>npm</code>：Nodejs 下的包管理器，类似于 Mac 下的 Homebrew</li>
<li><code>webpack</code>：Vue 的组件都是通过 <code>.vue</code> 或者像微信小程序的<code>.wxml</code> 和<code>.wcss</code> 等自定义的组件都无法被用户通过各种浏览器解析，需要被翻译打包成 js 文件</li>
<li><code>vue-cli</code>：用来生成模版的 Vue 工程，相当于按照设计好的图纸来盖房子</li>
</ul>
<h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">brew install nodejs</span><br></pre></td></tr></table></figure>

<h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install webpack -g</span><br></pre></td></tr></table></figure>

<h2 id="安装VUE脚手架"><a href="#安装VUE脚手架" class="headerlink" title="安装VUE脚手架"></a>安装VUE脚手架</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">sudo npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vue list</span><br></pre></td></tr></table></figure>

<h2 id="创建VUE项目"><a href="#创建VUE项目" class="headerlink" title="创建VUE项目"></a>创建VUE项目</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vue init webpack frontend(项目名)</span><br></pre></td></tr></table></figure>

<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>



<blockquote>
<p>安装过程中可能会因为权限问题安装报错，此事在命令前加上 sudo 获取管理员权限即可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringAOP整理</title>
    <url>/2021/04/05/SpringAOP%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><ul>
<li><p>什么是AOP？</p>
<p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的核心内容之一。 利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
</li>
<li><p>AOP与OOP</p>
<p>AOP可以说是OOP（面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。 不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。 日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting）。在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>
</li>
<li><p>对AOP的理解</p>
<p><strong>AOP的核心思想是帮助我们在扩展功能（方法）时可以不依靠修改源代码来实现。其采取横向抽取机制，规避了传统面向对象中纵向继承体系的重复性高耦合代码</strong></p>
<blockquote>
<p>以上三点来源</p>
</blockquote>
<p>作者：东_214a<br>链接：<a href="https://www.jianshu.com/p/bd5b0a2938f9">https://www.jianshu.com/p/bd5b0a2938f9</a><br>来源：简书</p>
</li>
</ul>
<h2 id="AOP编程术语"><a href="#AOP编程术语" class="headerlink" title="AOP编程术语"></a>AOP编程术语</h2><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210401201900805.png" alt="image-20210401201900805"></p>
<h2 id="AOP编程实战"><a href="#AOP编程实战" class="headerlink" title="AOP编程实战"></a>AOP编程实战</h2><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>cglib（可以不引入依赖，spring-context包含spring-aop）</p>
<p><font color="red"><strong>没整理完，以后补上。</strong></font></p>
<h4 id="Spring-AOP-1"><a href="#Spring-AOP-1" class="headerlink" title="Spring AOP"></a>Spring AOP</h4><blockquote>
<p>Spring AOP分为三种：Advice组件,Aspectj(自定义注解),Aspectj(advisor),Aspect</p>
</blockquote>
<h5 id="Advice组件-简述"><a href="#Advice组件-简述" class="headerlink" title="Advice组件(简述)"></a>Advice组件(简述)</h5><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210401202119094.png" alt="image-20210401202119094"></p>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>委托类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">// 注册组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通知组件</p>
<p>实现<strong>MethodInterceptor</strong>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正道的光&quot;</span>);</span><br><span class="line">        Object proceed = methodInvocation.proceed();<span class="comment">// 执行委托类的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;照在大地上&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml中配置代理组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xxxx&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--委托类组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知类组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;customAdvice&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color="red">通知类组件的value对应通知组件的类名(首字母小写)/id值</font></p>
<p>单元测试</p>
<p>因为spring容器中有UserServiceImpl组件和生成的代理组件userServiceProxy，故不能只使用@Autowired来进行依赖注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userServiceProxy&quot;)</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.sayHello(<span class="string">&quot;小雪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h5><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h5><p>语法：<code>execution(修饰符 返回值 包名 类名 方法名(形参))</code></p>
<ul>
<li>访问修饰符可以省略</li>
<li>返回值类型、包名、类名、方法名可以使用星号*  代表任意</li>
<li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li>
<li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li>
</ul>
<p>例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution(public void com.itheima.aop.Target.method())	</span><br><span class="line">execution(void com.itheima.aop.Target.*(..))</span><br><span class="line">execution(* com.itheima.aop.*.*(..))</span><br><span class="line">execution(* com.itheima.aop..*.*(..))</span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure>

<h5 id="Aspectj-自定义注解"><a href="#Aspectj-自定义注解" class="headerlink" title="Aspectj(自定义注解)"></a>Aspectj(自定义注解)</h5><blockquote>
<p>自定义注解写在<strong>容器中的组件</strong>的哪个方法上，哪个方法就被增强</p>
</blockquote>
<p>自定义注解 CountTime.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//注解写在哪里 👉 方法上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//运行时生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CountTime &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义注解的通知 CountTimeAdvice.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountTimeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Object proceed = methodInvocation.proceed();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(methodInvocation.getMethod().getName() + <span class="string">&quot;方法执行时间为：&quot;</span> + (end - start));</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cskaoyan&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;countTimePointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;@annotation(com.cskaoyan.anno.CountTime)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;countTimeAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;countTimePointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义注解的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CountTime</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CountTime</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method3&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Aspectj-advisor"><a href="#Aspectj-advisor" class="headerlink" title="Aspectj(advisor)"></a>Aspectj(advisor)</h5><p>CustomAdvice.java 通知组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAdvice</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正道的光&quot;</span>);</span><br><span class="line">        Object proceed = methodInvocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;照在了大地上&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserServiceImpl.java 委托类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.cskaoyan.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello2</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">sayHello3</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sayHello3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Xml 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cskaoyan&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--service层里任意以sayHello开头的方法--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;mypointcut4&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.cskaoyan.service..sayHello*(..))&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;customAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut4&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h5><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210402013936601.png" alt="image-20210402013936601"></p>
<p><strong>Aspect的使用案例</strong></p>
<p>切面类 CustomAspect.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要将切面类注册到容器中，作为切面组件</span></span><br><span class="line"><span class="comment"> *      通知方法:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123; <span class="comment">// 👉 before</span></span><br><span class="line">        <span class="comment">//通过joinPoint拿到正在执行的方法中的对应的一些值</span></span><br><span class="line"></span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        String methodName = signature.getName();</span><br><span class="line"></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法携带的参数是：&quot;</span> + Arrays.asList(args));</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">0</span> &amp;&amp; <span class="string">&quot;景甜&quot;</span>.equals(args[<span class="number">0</span>]))&#123;</span><br><span class="line">            args[<span class="number">0</span>] = <span class="string">&quot;大甜甜&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object target = joinPoint.getTarget(); <span class="comment">//委托类对象</span></span><br><span class="line">        Object aThis = joinPoint.getThis();    <span class="comment">//代理对象</span></span><br><span class="line">        System.out.println(target.getClass());</span><br><span class="line">        System.out.println(aThis.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;正道的光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123; <span class="comment">// 👉 after</span></span><br><span class="line">        System.out.println(<span class="string">&quot;照在大地上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//around通知的返回值为Object 👉 委托类方法的执行结果 👉 类似于invocationHandler的invoke</span></span><br><span class="line">    <span class="comment">//参数中包含ProceedingJoinPoint 👉 还要执行委托类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始时间：&quot;</span> + start);</span><br><span class="line">        <span class="comment">//执行委托类的方法</span></span><br><span class="line">        Object proceed = joinPoint.proceed();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间为：&quot;</span> + (end - start));</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Throwable也可以</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception exception)</span></span>&#123;<span class="comment">//需要接收委托类方法执行过程中抛出的异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing:&quot;</span> + exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UserServiceIpl.java 委托类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello2</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml配置文件(以aop:config标签指定了各类方法(before,around…)对应的切面类中的方法)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cskaoyan&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--service层的任意方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;mypointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.cskaoyan.service..*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;customAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--pointcut和通知的结合</span></span><br><span class="line"><span class="comment">                method属性: 方法名，父标签中的ref属性对应的组件中的方法名 👉 切面组件中的方法名</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--需要通过returning属性指定method对应方法的哪一个参数来接收委托类方法的执行结果--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--需要通过throwing属性指定method对应方法的哪一个参数来接收委托类方法执行过程中抛出的异常--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类 MyTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.cskaoyan.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytest2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.sayHello2(<span class="string">&quot;景甜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="JoinPoint连接点"><a href="#JoinPoint连接点" class="headerlink" title="JoinPoint连接点"></a>JoinPoint连接点</h5><h2 id="注解使用Aspect"><a href="#注解使用Aspect" class="headerlink" title="注解使用Aspect"></a>注解使用Aspect</h2><p>在application.xml文件中配置如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解开关--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="利用注解将java类指定为切面组件"><a href="#利用注解将java类指定为切面组件" class="headerlink" title="利用注解将java类指定为切面组件"></a>利用注解将java类指定为切面组件</h4><p>@Aspect + @Component 写在类名上➡️以下二者是等价的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAspect</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;customAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="切入点的指定"><a href="#切入点的指定" class="headerlink" title="切入点的指定"></a>切入点的指定</h4><p>@Pointcut</p>
<p>以下二者等价</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法名任意，参数为空</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.cskaoyan.service..*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mypointcut</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;mypointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.cskaoyan.service..*(..))&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通知方法的配置"><a href="#通知方法的配置" class="headerlink" title="通知方法的配置"></a>通知方法的配置</h4><p>通知方法分为五种：before、after、around、afterReturning、afterThrowing</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解的value值可以写上面配置的切点方法的方法名(注意加上括号)</span></span><br><span class="line"><span class="meta">@Before(&quot;mypointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="完整的切面类配置示例"><a href="#完整的切面类配置示例" class="headerlink" title="完整的切面类配置示例"></a>完整的切面类配置示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要将切面类注册到容器中，作为切面组件</span></span><br><span class="line"><span class="comment"> *      通知方法:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pointcut以方法的形式存在</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值：void</span></span><br><span class="line"><span class="comment">     * 方法名：任意写 👉 方法名作为id</span></span><br><span class="line"><span class="comment">     * 参数：不需要</span></span><br><span class="line"><span class="comment">     * 方法体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Pointcut</span>：value属性值写的是切入点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.cskaoyan.service..*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mypointcut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Before(&quot;execution(* com.cskaoyan.service..*(..))&quot;)//相当于直接写切入点表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;mypointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123; <span class="comment">// 👉 before</span></span><br><span class="line">        <span class="comment">//通过joinPoint拿到正在执行的方法中的对应的一些值</span></span><br><span class="line"></span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        String methodName = signature.getName();</span><br><span class="line"></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法携带的参数是：&quot;</span> + Arrays.asList(args));</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">0</span> &amp;&amp; <span class="string">&quot;景甜&quot;</span>.equals(args[<span class="number">0</span>]))&#123;</span><br><span class="line">            args[<span class="number">0</span>] = <span class="string">&quot;大甜甜&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object target = joinPoint.getTarget(); <span class="comment">//委托类对象</span></span><br><span class="line">        Object aThis = joinPoint.getThis();    <span class="comment">//代理对象</span></span><br><span class="line">        System.out.println(target.getClass());</span><br><span class="line">        System.out.println(aThis.getClass());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;正道的光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;mypointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123; <span class="comment">// 👉 after</span></span><br><span class="line">        System.out.println(<span class="string">&quot;照在大地上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;mypointcut()&quot;)</span></span><br><span class="line">    <span class="comment">//around通知的返回值为Object 👉 委托类方法的执行结果 👉 类似于invocationHandler的invoke</span></span><br><span class="line">    <span class="comment">//参数中包含ProceedingJoinPoint 👉 还要执行委托类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始时间：&quot;</span> + start);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行委托类的方法</span></span><br><span class="line">        Object proceed = joinPoint.proceed();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间为：&quot;</span> + (end - start));</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;mypointcut()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;mypointcut()&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="comment">//Throwable也可以</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception exception)</span></span>&#123;<span class="comment">//需要接收委托类方法执行过程中抛出的异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing:&quot;</span> + exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="SM整合-Spring-MyBatis"><a href="#SM整合-Spring-MyBatis" class="headerlink" title="SM整合 (Spring + MyBatis)"></a>SM整合 (Spring + MyBatis)</h2><h4 id="引入mybatis的相关依赖"><a href="#引入mybatis的相关依赖" class="headerlink" title="引入mybatis的相关依赖"></a>引入mybatis的相关依赖</h4><p>Pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="需要额外引入的依赖-Spring整合mybatis所需要的依赖"><a href="#需要额外引入的依赖-Spring整合mybatis所需要的依赖" class="headerlink" title="需要额外引入的依赖(Spring整合mybatis所需要的依赖)"></a>需要额外引入的依赖(Spring整合mybatis所需要的依赖)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--mybatis对spring支持的依赖--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--datasource--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="在SpringApplication-xml中注册Mybatis的相关组件"><a href="#在SpringApplication-xml中注册Mybatis的相关组件" class="headerlink" title="在SpringApplication.xml中注册Mybatis的相关组件"></a>在SpringApplication.xml中注册Mybatis的相关组件</h4><p>从上到下三个bean依次是 Datasource、SqlsessionFactory、Mapper扫描组件(省去配置Mapper映射关系)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/demo?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory666&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.cskaoyan.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory666&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二个bean中的SqlSessionFactoryBean返回的其实是一个sqlsession工厂对象对象，而不是bean对象。</p>
<h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><blockquote>
<p>当做好以上的基础配置之后，Spring与Mybatis就做到了整合。</p>
</blockquote>
<p>项目文件结构：</p>
<p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210405011234953.png" alt="image-20210405011234953"></p>
<p>整合之后可以直接通过@Autowired就可以获取到Mapper对象，不需要再先获取sqlsession，然后再用sqlsession.getMapper()获取Mapper对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytest3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String username = userMapper.selectNameById(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>top</title>
    <url>/2021/04/04/top/</url>
    <content><![CDATA[<h2 id="没啥好说的，就放只小猫咪吧🤩"><a href="#没啥好说的，就放只小猫咪吧🤩" class="headerlink" title="没啥好说的，就放只小猫咪吧🤩"></a>没啥好说的，就放只小猫咪吧🤩</h2><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210405013411118.png" alt="image-20210405013411118"></p>
<p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/31617728438_.pic.jpg" alt="31617728438_.pic"></p>
<p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/41617728439_.pic.jpg" alt="41617728439_.pic"></p>
<p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/51617728440_.pic.jpg" alt="51617728440_.pic"></p>
<p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/71617728441_.pic-7728909.jpg" alt="71617728441_.pic"></p>
]]></content>
  </entry>
  <entry>
    <title>加载配置文件</title>
    <url>/2021/03/29/%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="写一个Mybatis工具类来记录加载配置文件的方法"><a href="#写一个Mybatis工具类来记录加载配置文件的方法" class="headerlink" title="写一个Mybatis工具类来记录加载配置文件的方法"></a>写一个Mybatis工具类来记录加载配置文件的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String drivername;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过类加载器去获取</span></span><br><span class="line">        ClassLoader classLoader = MybatisUtils.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载资源</span></span><br><span class="line">        InputStream in = classLoader.getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        drivername = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取sqlSession</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"></span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = Resources.getResourceAsStream(<span class="string">&quot;mybatis.xml&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory factory = sqlSessionFactoryBuilder.build(in);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="以下两个文件都放置于resources目录下"><a href="#以下两个文件都放置于resources目录下" class="headerlink" title="以下两个文件都放置于resources目录下"></a>以下两个文件都放置于resources目录下</h4><p>Jdbc.properties</p>
<blockquote>
<p>使用<code>&lt;properties resource=&quot;jdbc.properties&quot;/&gt;</code>标签可以简化Mybatis.xml文件中配置名的书写</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mall?useSSL=false&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>Mybatis.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是Mybatis的主配置文件 上面的dtd 文件定义了这个xml文件中的标签的名字，出现的位置，顺序--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个configuration其实就是这个配置文件的头，表示这个配置文件的开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注意这个位置有有顺序的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个是一个日志的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAliases&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias type=&quot;com.cskaoyan.user.User&quot; alias=&quot;user&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/typeAliases&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--environments 这个表示我们的数据源的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--id 表示环境的名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理器 表示数据库事务交给谁去管理 , Type=JDBC表示交给JDBC去管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--数据源（连接池）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个配置的是表示我们Mybatis需要把哪个Mapper加载进来，找到mapper.xml文件的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/AdminDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/UserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/ProductDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/OrderDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/MessageDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;dao/MallDao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;dao/PlayerMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;dao/Use1Mapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class=&quot;dao.PlayerMapper&quot;&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置了这个包名以后，我们的Mybatis会去把这个包里面的所有的配置文件加载进来--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;package name=&quot;dao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210329004016930.png" alt="image"></p>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>getResourceAsStream</tag>
        <tag>properties</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC1整理</title>
    <url>/2021/04/05/Spring-MVC1%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="SpringMVC和JavaEE比较"><a href="#SpringMVC和JavaEE比较" class="headerlink" title="SpringMVC和JavaEE比较"></a>SpringMVC和JavaEE比较</h2><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210402141831068.png" alt="image-20210402141831068"></p>
<h2 id="SpringMVC的核心流程"><a href="#SpringMVC的核心流程" class="headerlink" title="SpringMVC的核心流程"></a>SpringMVC的核心流程</h2><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210405194856723.png" alt="image-20210405194856723"></p>
<p><font color="red"><strong>待整理细化</strong></font></p>
<h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><blockquote>
<p>搭建第一个SpringMVC应用</p>
</blockquote>
<h4 id="导包-引入所需依赖"><a href="#导包-引入所需依赖" class="headerlink" title="导包 引入所需依赖"></a>导包 引入所需依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0-alpha-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在webapp-WEB-INF-web-xml中配置DispatcherServlet"><a href="#在webapp-WEB-INF-web-xml中配置DispatcherServlet" class="headerlink" title="在webapp/WEB-INF/web.xml中配置DispatcherServlet"></a>在webapp/WEB-INF/web.xml中配置DispatcherServlet</h4><p>Web.xml</p>
<p>通过DispatcherServlet初始化WebApplicationContext（Spring容器）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:application.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--除了web资源根路径下的jsp文件，其余所有都经过dispatcherServlet--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置application-xml"><a href="#配置application-xml" class="headerlink" title="配置application.xml"></a>配置application.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cskaoyan&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写controller组件，并用-Component指定servlet访问路径"><a href="#编写controller组件，并用-Component指定servlet访问路径" class="headerlink" title="编写controller组件，并用@Component指定servlet访问路径"></a>编写controller组件，并用@Component指定servlet访问路径</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问/hello请求，能够访问到hello.jsp，并且呈现hello springmvc</span></span><br><span class="line"><span class="meta">@Component(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;/WEB-INF/hello.jsp&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;SpringMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="入门案例2"><a href="#入门案例2" class="headerlink" title="入门案例2"></a>入门案例2</h2><blockquote>
<p>改进：将url和方法建立映射关系，而不是映射到整个类上，不够灵活。</p>
</blockquote>
<p>配置springApplication.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cskaoyan&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--RequestMappingHandlerMapping--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--RequestMappingHandlerAdapter--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--该标签也帮我们注册了HandlerMapping和HandlerAdapter--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写handler组件 使用**@RequestMapping**注解建立url与方法之间的映射关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler组件</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Autowired</span></span><br><span class="line"><span class="comment">    UserService userService;*/</span></span><br><span class="line">    <span class="comment">//handlerMethod</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;/WEB-INF/hello.jsp&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;SpringMVC2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/hello.jsp&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;景甜，登录成功&quot;</span>);</span><br><span class="line">        String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.asList(beanDefinitionNames));</span></span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml文件与案例一相同，这里不再列出。</p>
<h3 id="Handler方法"><a href="#Handler方法" class="headerlink" title="Handler方法"></a>Handler方法</h3><h4 id="URL路径映射"><a href="#URL路径映射" class="headerlink" title="@URL路径映射"></a>@URL路径映射</h4><ul>
<li><p>多个请求映射到一个handler方法上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//value属性：String[] 👉 多个url映射到一个handler方法上</span></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;hello1&quot;,&quot;hello2&quot;,&quot;hello3&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/hello.jsp&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;SpringMVC3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;goodbye*&quot;,&quot;goodbye/*&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">goodBye</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/goodbye.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="路径映射时通配符的使用"><a href="#路径映射时通配符的使用" class="headerlink" title="路径映射时通配符的使用"></a>路径映射时通配符的使用</h4><p><code>@RequestMapping(&#123;&quot;goodbye*&quot;,&quot;goodbye/*&quot;,&quot;goodbye/**&quot;&#125;)</code></p>
<p>goodbye*：通配以goodbye开头的单级url</p>
<p>goodbye/*：通配goodbye下任意一个二级url</p>
<p>goodbye/**：通配goodbye下任意二级或多级url</p>
<h4 id="一个URL映射到不同的方法"><a href="#一个URL映射到不同的方法" class="headerlink" title="一个URL映射到不同的方法"></a>一个URL映射到不同的方法</h4><blockquote>
<p>后面会整理</p>
</blockquote>
<h4 id="窄化请求"><a href="#窄化请求" class="headerlink" title="窄化请求"></a>窄化请求</h4><p>将开头url相同的部分用注解写到类名上，剩余不同部分写到不同方法名上。如下：</p>
<p>/user/login</p>
<p>/user/register</p>
<p>/user/logout</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/login.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">register</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/register.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;logout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/logout.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>方法上的@RequestMapping注解的value属性值，最左边的”/”可以省略，SpringMVC会帮我们拼接</strong></p>
<h4 id="请求方法限定"><a href="#请求方法限定" class="headerlink" title="请求方法限定"></a>请求方法限定</h4><blockquote>
<p>限定HandlerMethod映射的请求url对应的请求方法。如post、get</p>
</blockquote>
<p>限定使用注解<code>@RequestMapping的method属性</code>，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;method&quot;)</span> <span class="comment">//窄化请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMethodLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;get&quot;,method= RequestMethod.GET)</span><span class="comment">//url = method/get</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">methodGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/method.jsp&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;method&quot;</span>, <span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;post&quot;,method = RequestMethod.POST)</span><span class="comment">//url = method/post</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">methodPost</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/method.jsp&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;method&quot;</span>, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求方法之间的关系是 or</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;double&quot;,method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">methodDouble</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/method.jsp&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;method&quot;</span>, <span class="string">&quot;GET or POST&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="对请求方法限定的注解引申"><a href="#对请求方法限定的注解引申" class="headerlink" title="对请求方法限定的注解引申"></a>对请求方法限定的注解引申</h4><p><code>@GetMapping  @PostMapping</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;login&quot;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>

<p>他们的区别仅仅存在写法上的区别，本质毫无差别。</p>
<h4 id="请求参数限定"><a href="#请求参数限定" class="headerlink" title="请求参数限定"></a>请求参数限定</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;parameter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//localhost:8080/parameter/login?username=jingtian&amp;password=niupi</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;login&quot;,params = &quot;username&quot;)//限定请求参数一定要携带username</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;login&quot;,params = &quot;password&quot;)//限定请求参数一定要携带password</span></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;login&quot;,params = &#123;&quot;username&quot;,&quot;password&quot;&#125;)//限定请求参数一定要携带username and password</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;login&quot;,params = &#123;&quot;username!=jingtian&quot;,&quot;password&quot;&#125;)</span><span class="comment">//限定请求参数一定要携带username and password,并且username不能是jingtian</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/parameter.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="请求头限定"><a href="#请求头限定" class="headerlink" title="请求头限定"></a>请求头限定</h4><h5 id="普通请求头限定"><a href="#普通请求头限定" class="headerlink" title="普通请求头限定"></a>普通请求头限定</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;limit&quot;,headers = &#123;&quot;abc&quot;,&quot;def&quot;&#125;)</span><span class="comment">//abc、def均需要包含</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">headerLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/header.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="特定的请求头限定"><a href="#特定的请求头限定" class="headerlink" title="特定的请求头限定"></a>特定的请求头限定</h5><p>consumes限定ContentType</p>
<p>produces限定Accept</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//accept和contentType对应的值的类型是  xxx/xxx</span></span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;accept&quot;,produces = &quot;application/abc&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">acceptLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/header.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;contenttype&quot;,consumes = &quot;application/def&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">contenttypeLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/header.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="Handler方法的返回值"><a href="#Handler方法的返回值" class="headerlink" title="Handler方法的返回值"></a>Handler方法的返回值</h4><h5 id="Void（不推荐）"><a href="#Void（不推荐）" class="headerlink" title="Void（不推荐）"></a>Void（不推荐）</h5><p>采用JavaEE阶段的处理方式，传入参数HttpServletRequest、HttpServletResponse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;hellofriend&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hellofriend</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;accept&quot;,produces = &quot;application/abc&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">acceptLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/WEB-INF/header.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回值字符串作为viewName</span></span><br><span class="line">  <span class="comment">//Model直接写在形参中</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">      model.addAttribute(<span class="string">&quot;result&quot;</span>, <span class="string">&quot;string&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/hello.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h5 id="请求转发和重定向"><a href="#请求转发和重定向" class="headerlink" title="请求转发和重定向"></a>请求转发和重定向</h5><p>redirect 会修改浏览器的URL，forward不会。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//@RequestMapping(&quot;aaa&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardRirectController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;destination&quot;)</span><span class="comment">//目的地</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">destination</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/destination.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;aaa/forward&quot;)</span><span class="comment">//aaa/forward 👉 aaa/destination</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">forward</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;forward&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:destination&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;aaa/bbb/redirect&quot;)</span><span class="comment">//aaa/bbb/redirect 👉 aaa/bbb/destination</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;redirect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:destination&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//相对的路径：去除掉请求url的最后一级，然后拼接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210405205655165.png" alt="image-20210405205655165"></p>
<h4 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h4><p>使用<code>@ResponseBody</code>注释，Json工具类会自动将Object转换为json字符串。</p>
<h6 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span><span class="comment">// = @Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseRespVo <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BaseRespVo baseRespVo = <span class="keyword">new</span> BaseRespVo();</span><br><span class="line">        baseRespVo.setData(<span class="string">&quot;景甜&quot;</span>);</span><br><span class="line">        baseRespVo.setMessage(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        baseRespVo.setErrno(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> baseRespVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>SpringIOC整理</title>
    <url>/2021/04/01/SpringIOC%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="Spring-入门案例"><a href="#Spring-入门案例" class="headerlink" title="Spring 入门案例"></a>Spring 入门案例</h2><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建spring容器-xml文件"><a href="#创建spring容器-xml文件" class="headerlink" title="创建spring容器(xml文件)"></a>创建spring容器(xml文件)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在这里定义bean对象 --&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建service对象"><a href="#创建service对象" class="headerlink" title="创建service对象"></a>创建service对象</h4><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331200533453.png" alt="image-20210331200533453"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImp</span> <span class="keyword">implements</span> <span class="title">TestService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好帅~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将该对象注入到spring容器中"><a href="#将该对象注入到spring容器中" class="headerlink" title="将该对象注入到spring容器中"></a>将该对象注入到spring容器中</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.TestServiceImp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取ApplicationContext-对象"><a href="#获取ApplicationContext-对象" class="headerlink" title="获取ApplicationContext 对象"></a>获取ApplicationContext 对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="获取对象并调用方法"><a href="#获取对象并调用方法" class="headerlink" title="获取对象并调用方法"></a>获取对象并调用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.service.TestService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        TestService testService = (TestService) applicationContext.getBean(<span class="string">&quot;testService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        testService.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="获取ApplicationContext组件的三种方式"><a href="#获取ApplicationContext组件的三种方式" class="headerlink" title="获取ApplicationContext组件的三种方式"></a>获取ApplicationContext组件的三种方式</h2><h4 id="按照组件id取"><a href="#按照组件id取" class="headerlink" title="按照组件id取"></a>按照组件id取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestService testService = (TestService) applicationContext.getBean(<span class="string">&quot;testService&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="按照组件类型取-该组件类型只包含一个类的时候"><a href="#按照组件类型取-该组件类型只包含一个类的时候" class="headerlink" title="按照组件类型取(该组件类型只包含一个类的时候)"></a>按照组件类型取(该组件类型只包含一个类的时候)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestService testService2 = (TestService) applicationContext.getBean(TestService.class);</span><br></pre></td></tr></table></figure>



<h4 id="按照组件id-类型取"><a href="#按照组件id-类型取" class="headerlink" title="按照组件id+类型取"></a>按照组件id+类型取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestService testService3 = (TestService) applicationContext.getBean(<span class="string">&quot;testService2&quot;</span>, TestService.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="入门案例2-通过property建立组件之间的依赖关系"><a href="#入门案例2-通过property建立组件之间的依赖关系" class="headerlink" title="入门案例2(通过property建立组件之间的依赖关系)"></a>入门案例2(通过property建立组件之间的依赖关系)</h2><h4 id="Spring-xml-中的写法"><a href="#Spring-xml-中的写法" class="headerlink" title="Spring.xml 中的写法"></a>Spring.xml 中的写法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.service.TestServiceImp&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;usermapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;usermapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>property中name标签对应TestServiceImpl中的setMapper方法，ref对应依赖对象的bean标签id。若要建立依赖的成员变量为基本类型，则ref改为value，value中写成员变量的值。</strong></p>
<h4 id="UserMapperImpl-java"><a href="#UserMapperImpl-java" class="headerlink" title="UserMapperImpl.java"></a>UserMapperImpl.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天你吃了吗？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="TestServiceImpl-java"><a href="#TestServiceImpl-java" class="headerlink" title="TestServiceImpl.java"></a>TestServiceImpl.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImp</span> <span class="keyword">implements</span> <span class="title">TestService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserMapper usermapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMapper</span><span class="params">(UserMapper usermapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usermapper = usermapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        usermapper.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="BeanFactory容器接口"><a href="#BeanFactory容器接口" class="headerlink" title="BeanFactory容器接口"></a>BeanFactory容器接口</h2><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331211918041.png" alt="image-20210331211918041"></p>
<h2 id="Bean的实例化方式"><a href="#Bean的实例化方式" class="headerlink" title="Bean的实例化方式"></a>Bean的实例化方式</h2><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h5><p>获得bean组件，默认使用的方式就是无参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;usermapper&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.mapper.UserMapperImpl&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>



<h5 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userMapperz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;orderMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;orderMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;parameter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.mapper.UserMapperImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.mapper.OrderMapperImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>constructor-arg标签中name对应构造方法中的形参名，ref对应组件id，value则为基本类型的值</strong></p>
<p>UserServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line">    String parameter;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserMapper userMapperz, OrderMapper orderMapper,String parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapperz;</span><br><span class="line">        <span class="keyword">this</span>.orderMapper = orderMapper;</span><br><span class="line">        <span class="keyword">this</span>.parameter = parameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h4><h5 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h5><p>StaticFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFromStaticFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>factory-method: 对应当前class的方法名</strong></p>
<h5 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h5><p>InstanceFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.factory.InstanceFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFromInstanceFactory&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>实例工厂先注册工厂组件，然后在配置工厂组件。factory-bean对应工厂组件id，factory-method 对应工厂中生成实例的方法名。</strong></p>
<h5 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h5><p>BeanFactory和FactoryBean之间的异同：</p>
<p>BeanFactory与FactoryBean均为接口，他们都提供了生产Bean实例的方法。</p>
<p>BeanFactory接口的继承关系在上述图片中有展示。FactoryBean中则提供了getObject()方法用来返回生产的组件对象。<img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331214559356.png" alt="image-20210331214559356"></p>
<p>下面是FactoryBean接口的使用：</p>
<p>UserFactoryBean.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cskaoyan.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cskaoyan.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用到factoryBean的getObject方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFromFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.factory.UserFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取FactoryBean生产的User实例</span></span><br><span class="line">Object userFromFactoryBean = applicationContext.getBean(<span class="string">&quot;userFromFactoryBean&quot;</span>);</span><br></pre></td></tr></table></figure>





<h2 id="组件的作用域-Scope"><a href="#组件的作用域-Scope" class="headerlink" title="组件的作用域(Scope)"></a>组件的作用域(Scope)</h2><p>singleton：组件在容器中以单例的形式存在</p>
<p>prototype:  每一次获得组件的时候都去获得一个新的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;userService1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.cskaoyan.service.UserService1&quot;</span> scope=<span class="string">&quot;singleton&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.cskaoyan.service.UserService2&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService3&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.cskaoyan.service.UserService3&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>不加scope属性则默认为singleton</strong></p>
<h2 id="生命周期-组件到达可用状态经历的过程"><a href="#生命周期-组件到达可用状态经历的过程" class="headerlink" title="生命周期(组件到达可用状态经历的过程)"></a>生命周期(组件到达可用状态经历的过程)</h2><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331234346810.png" alt="image-20210331234346810"></p>
<p>当组件到达可用状态之前，可以在如上阶段对组件进行操作(只需要实现相应的接口，进行相应的操作即可。<strong>BeanPostProcessor方法例外，它的作用域是spring容器中实现BeanPostProcessor的组件之外的其他组件</strong>)</p>
<h4 id="scope对生命周期的影响"><a href="#scope对生命周期的影响" class="headerlink" title="scope对生命周期的影响"></a>scope对生命周期的影响</h4><p>scope会影响组件到达可用状态之前的这些生命周期的执行(<strong>影响执行开始的时间</strong>)</p>
<p><strong>singleton</strong>:容器初始化的时候生命周期已经执行完毕（调用getBean方法之前已经执行完了）</p>
<p><strong>prototype</strong>:当调用getBean( )（获得组件时），才开始执行生命周期。</p>
<p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331235053372.png" alt="image-20210331235053372"></p>
<h4 id="完整的生命周期流程图"><a href="#完整的生命周期流程图" class="headerlink" title="完整的生命周期流程图"></a>完整的生命周期流程图</h4><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210331235147656.png" alt="image-20210331235147656"></p>
<h4 id="给组件提供生命周期的代码示例"><a href="#给组件提供生命周期的代码示例" class="headerlink" title="给组件提供生命周期的代码示例"></a>给组件提供生命周期的代码示例</h4><p>LifeCyleBean.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleBean</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">BeanFactoryAware</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    String beanName;<span class="comment">//null 👉 通过setBeanName方法完成赋值</span></span><br><span class="line"></span><br><span class="line">    BeanFactory beanFactory;</span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifeCycleBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1、无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2、设置参数&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得该组件的name 👉 可以利用获得的组件的name给当前组件的成员变量复制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setBeanName:&quot;</span> + s);</span><br><span class="line">        <span class="keyword">this</span>.beanName = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setBeanFactory&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setApplicationContext&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterPropertiesSet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myinit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义的init方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mydestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;lifecycleBean的destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disposableBean的destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BeanPostProcessor的使用"><a href="#BeanPostProcessor的使用" class="headerlink" title="BeanPostProcessor的使用"></a>BeanPostProcessor的使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//作用范围：除了他本身，其他的所有组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//bean：当前正在生命周期的组件</span></span><br><span class="line">    <span class="comment">//beanName: 组件的名称</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">/*if (beanName.contains(&quot;datasource&quot;))&#123;</span></span><br><span class="line"><span class="comment">            DataSource dataSource = (DataSource) bean;</span></span><br><span class="line"><span class="comment">            String password = dataSource.getPassword();//密文</span></span><br><span class="line"><span class="comment">            //解密</span></span><br><span class="line"><span class="comment">            String password2 = jiemi(password);</span></span><br><span class="line"><span class="comment">            dataSource.setPassword(password2);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//传入的bean通过动态代理生成一个代理对象，return代理对象 → 狸猫换太子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;beanPostProcessor的before：&quot;</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beanPostProcessor的after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>postProcessBeforeInitialization、postProcessAfterInitialization 都是在组件可用状态之前执行的。</p>
<p>BeanPostProcessor 的作用范围是spring容器中除了它本身作用的组件之外的所有组件。</p>
<h4 id="自定义init方法与destory方法"><a href="#自定义init方法与destory方法" class="headerlink" title="自定义init方法与destory方法"></a>自定义init方法与destory方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;lifecycleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cskaoyan.bean.LifeCycleBean&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;myinit&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;mydestroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义初始化与销毁方法要在bean标签中进行声明，init-method与destory-method方法对应的是自定义初始化方法和销毁方法的方法名，<font color="red">方法名可以自由设定。</font></p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>使用注解对组件进行配置首先需要在xml文件中进行如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;包的全类名&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userService&quot;) //组件id为该注解的value属性值</span></span><br><span class="line"><span class="meta">@Component</span>                  <span class="comment">//组件id的默认值 → 类名的首字母小写 → userServiceImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他注解</strong>(效果与@Component是一样的)</p>
<p>@Service ：service层的组件</p>
<p>@Repository：dao层的组件</p>
<p>@Controller：controller层的组件（SpringMVC阶段才去使用）</p>
<p><strong>组件注入</strong></p>
<p>@Autowired：按照类型来进行注入</p>
<p>@Autowired + @Qualifier：当类型中不止一个类时，使用该注解</p>
<p>@Resource：使用name属性来指定组件id</p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Component(&quot;userService&quot;) //组件id为该注解的value属性值</span></span><br><span class="line"><span class="meta">@Component</span>                  <span class="comment">//组件id的默认值 → 类名的首字母小写 → userServiceImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器中该类型的组件只有一个</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userMapperImpl1&quot;)</span></span><br><span class="line">    UserMapper userMapper1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userMapperImpl2&quot;)</span> <span class="comment">//默认可以按照类型注入，可以使用name属性来指定组件id</span></span><br><span class="line">    UserMapper userMapper2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayAllHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderMapper.hello();</span><br><span class="line">        userMapper1.sayHello();</span><br><span class="line">        userMapper2.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="自定义初始化和销毁方法"><a href="#自定义初始化和销毁方法" class="headerlink" title="自定义初始化和销毁方法"></a>自定义初始化和销毁方法</h5><p>init-method：@PostConstruct</p>
<p>destroy-method：@PreDestroy</p>
<p><strong>将注解写在方法上</strong></p>
<h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h5><p>@Scope ：将作用域的值写在注解中</p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Spring单元测试中的注解"><a href="#Spring单元测试中的注解" class="headerlink" title="Spring单元测试中的注解"></a>Spring单元测试中的注解</h2><p><strong>首先应先导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>然后给Spring的单元测试配置环境</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:application.xml&quot;)</span> <span class="comment">// xml文件的路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>简单使用案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        userService.sayAllHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Maven手动创建SpringBoot项目</title>
    <url>/2021/04/07/Maven%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="手动用Maven创建一个SpringBoot项目-简版"><a href="#手动用Maven创建一个SpringBoot项目-简版" class="headerlink" title="手动用Maven创建一个SpringBoot项目(简版)"></a>手动用Maven创建一个SpringBoot项目(简版)</h3><h3 id="1-创建一个Maven项目"><a href="#1-创建一个Maven项目" class="headerlink" title="1. 创建一个Maven项目"></a>1. 创建一个Maven项目</h3><h3 id="2-修改pom-xml文件，增加如下配置"><a href="#2-修改pom-xml文件，增加如下配置" class="headerlink" title="2. 修改pom.xml文件，增加如下配置"></a>2. 修改pom.xml文件，增加如下配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-创建启动类并添加注解"><a href="#3-创建启动类并添加注解" class="headerlink" title="3. 创建启动类并添加注解"></a>3. 创建启动类并添加注解</h3><p><code>@SpringBootApplication</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210406235906473.png" alt="image-20210406235906473" style="zoom: 67%;">]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Hibernate Validation</title>
    <url>/2021/04/07/Hibernate-Validation/</url>
    <content><![CDATA[<h1 id="Hibernate-Validation-参数校验框架"><a href="#Hibernate-Validation-参数校验框架" class="headerlink" title="Hibernate Validation 参数校验框架"></a>Hibernate Validation 参数校验框架</h1><blockquote>
<p>SpringMVC提供了参数封装、动作解耦、结果对象生成json字符串等。但参数的合法性验证没有很好的解决方案。Hibernate Validation就是用来简化参数验证的一个后端轻量级框架。</p>
</blockquote>
<h1 id="Hibernate-Validation的使用"><a href="#Hibernate-Validation的使用" class="headerlink" title="Hibernate Validation的使用"></a>Hibernate Validation的使用</h1><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h4><blockquote>
<p>选用6开头的版本对应5开头版本的Spring</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-在application-xml中注册Validator组件"><a href="#2-在application-xml中注册Validator组件" class="headerlink" title="2. 在application.xml中注册Validator组件"></a>2. 在application.xml中注册Validator组件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;validator&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;validator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提供一个工厂类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;providerClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.validator.HibernateValidator&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用Hibernate-Validation注解"><a href="#3-使用Hibernate-Validation注解" class="headerlink" title="3. 使用Hibernate Validation注解"></a>3. 使用Hibernate Validation注解</h4><p>bean对象中给变量加上注解，<strong>注解中message字段若不写，则Hibernate也会提供一个默认错误提示信息。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Length(min = 6,message = &quot;长度最小为6&quot;)</span></span><br><span class="line">    String username;</span><br><span class="line">    <span class="meta">@Length(min = 6,max = 8,message = &quot;password length must between 6 and 8&quot;)</span></span><br><span class="line">    String password;</span><br><span class="line">    <span class="meta">@Min(value = 18,message = &quot;错误提示信息1&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 150,message = &quot;错误提示信息2&quot;)</span></span><br><span class="line">    Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在controller方法中形参前要加上@Valid或@Validated注解，声明该请求参数需要增加校验</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseRespVo <span class="title">login</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-常见注解"><a href="#4-常见注解" class="headerlink" title="4. 常见注解"></a>4. 常见注解</h4><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210406200044105.png" alt="image-20210406200044105"></p>
<h4 id="5-BindingResult"><a href="#5-BindingResult" class="headerlink" title="5. BindingResult"></a>5. BindingResult</h4><blockquote>
<p>若使用Hibernate Validation对参数进行校验，不满足条件的情况下不会进入到Handeler方法，会在浏览器端直接进行报错。故需要使用BindingResult对参数不满足条件的情况进行针对性处理。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseRespVo <span class="title">login</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//请求参数是否全部都通过校验</span></span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasFieldErrors()) &#123;</span><br><span class="line">            <span class="comment">//获得请求参数所对应的成员变量的错误</span></span><br><span class="line">            FieldError fieldError = bindingResult.getFieldError();</span><br><span class="line">            <span class="comment">//有错误的成员变量名 → 请求参数名 → 哪一个请求参数有问题</span></span><br><span class="line">            String field = fieldError.getField();</span><br><span class="line">            String defaultMessage = fieldError.getDefaultMessage();</span><br><span class="line">            String message = field + <span class="string">&quot;出问题了：&quot;</span> + defaultMessage;</span><br><span class="line">            <span class="keyword">return</span> BaseRespVo.fail(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BaseRespVo.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>BindingResult有多种方法进行操作如下：<font color="red"><strong>后面补充学习</strong></font></p>
<p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210406212008654.png" alt="image-20210406212008654"></p>
<blockquote>
<p>@Valid 和 BindingResult 是一一对应的，如果有多个@Valid，那么每个@Valid后面跟着的BindingResult就是这个@Valid的验证结果，顺序不能乱。</p>
</blockquote>
<h4 id="补充：Hibernate-Validation验证基本数据类型"><a href="#补充：Hibernate-Validation验证基本数据类型" class="headerlink" title="补充：Hibernate Validation验证基本数据类型"></a>补充：Hibernate Validation验证基本数据类型</h4><p><font color="red"><strong>我也不知道有没有，暂时不会</strong></font></p>
]]></content>
      <categories>
        <category>参数验证框架</category>
      </categories>
  </entry>
  <entry>
    <title>Git 的使用</title>
    <url>/2021/04/07/Git-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210407210140895.png" alt="image-20210407210140895"></p>
<h3 id="一、初始化本地仓库"><a href="#一、初始化本地仓库" class="headerlink" title="一、初始化本地仓库"></a>一、初始化本地仓库</h3><h4 id="1-Git-init"><a href="#1-Git-init" class="headerlink" title="1. Git init"></a>1. Git init</h4><p>进入某个文件夹，执行<code>git init</code>命令</p>
<img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210407210512130.png" alt="image-20210407210512130" style="zoom: 50%;">

<p>与<code>.git</code>文件夹同级的目录即为工作目录</p>
<h4 id="2-Git-init-–bare-name"><a href="#2-Git-init-–bare-name" class="headerlink" title="2. Git init –bare name"></a>2. Git init –bare <code>name</code></h4><img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210407210826391.png" alt="image-20210407210826391" style="zoom:50%;">

<p>会以name新建一个文件夹，该name文件夹下即为工作目录</p>
<h4 id="3-git-clone-url"><a href="#3-git-clone-url" class="headerlink" title="3. git clone url"></a>3. git clone <code>url</code></h4><p>将url所指向的仓库clone到本地</p>
<h4 id="4-git-status"><a href="#4-git-status" class="headerlink" title="4. git status"></a>4. git status</h4><p>查看工作区相对于暂存区的状态：有哪些地方发生变化，是否提交到暂存区</p>
<h4 id="5-git-add-file-name"><a href="#5-git-add-file-name" class="headerlink" title="5. git add file name"></a>5. git add <code>file name</code></h4><ul>
<li><code>git add .</code> 将所有文件add到暂存区</li>
<li><code>git add filename</code> 将制定文件add到暂存区</li>
</ul>
<h4 id="6-设置用户信息"><a href="#6-设置用户信息" class="headerlink" title="6. 设置用户信息"></a>6. 设置用户信息</h4><h4 id="7-git-commit-m"><a href="#7-git-commit-m" class="headerlink" title="7. git commit -m"></a>7. git commit -m</h4><p>提交暂存区的变化到本地仓库，同时生成版本(有版本号)</p>
<h4 id="8-git-log"><a href="#8-git-log" class="headerlink" title="8. git log"></a>8. git log</h4><p>查看历史版本日志</p>
<h4 id="9-git-push"><a href="#9-git-push" class="headerlink" title="9. git push"></a>9. git push</h4><p>将本地仓库push到远程仓库</p>
<h4 id="10-git-pull"><a href="#10-git-pull" class="headerlink" title="10. git pull"></a>10. git pull</h4><p>获取远程仓库的更新</p>
<p>ps: 每次push前先pull。先更新本地仓库再上传</p>
<h4 id="11-冲突"><a href="#11-冲突" class="headerlink" title="11. 冲突"></a>11. 冲突</h4><p>若多个开发人员同时修改了同一个文件会发生冲突。若发生冲突，则后提交的人需要处理冲突。</p>
<h3 id="二、撤销操作"><a href="#二、撤销操作" class="headerlink" title="二、撤销操作"></a>二、撤销操作</h3><h4 id="1-工作区回退"><a href="#1-工作区回退" class="headerlink" title="1. 工作区回退"></a>1. 工作区回退</h4><p><code>git checkout 文件名</code>(慎用)，不可恢复</p>
<h4 id="2-从暂存区回退到工作区"><a href="#2-从暂存区回退到工作区" class="headerlink" title="2. 从暂存区回退到工作区"></a>2. 从暂存区回退到工作区</h4><p><code>git reset 文件名</code></p>
<h4 id="3-本地仓库回退到之前的某个版本"><a href="#3-本地仓库回退到之前的某个版本" class="headerlink" title="3. 本地仓库回退到之前的某个版本"></a>3. 本地仓库回退到之前的某个版本</h4><p><code>git reset --hard 版本号</code>  <font color="red"><strong>版本号不需要写全，只需要写5？6？7？位，好像能区别不同版本就行</strong></font></p>
<p><strong>ps: 在执行回退操作之前可以执行<code>git log</code>查看历史版本commit信息，可以查看历史版本号。</strong></p>
<h4 id="4-误删文件的解决办法"><a href="#4-误删文件的解决办法" class="headerlink" title="4. 误删文件的解决办法"></a>4. 误删文件的解决办法</h4><ol>
<li>回退到之前的版本</li>
<li>找到删除的内容</li>
<li>git pull 更新本地仓库</li>
<li>git push重新提交</li>
</ol>
<h4 id="5-查看所有分支"><a href="#5-查看所有分支" class="headerlink" title="5. 查看所有分支"></a>5. 查看所有分支</h4><p><code>git branch -a</code></p>
<h4 id="6-建立分支之间的跟踪关系有待细化"><a href="#6-建立分支之间的跟踪关系有待细化" class="headerlink" title="6. 建立分支之间的跟踪关系有待细化"></a>6. 建立分支之间的跟踪关系<font color="red">有待细化</font></h4><p><code>git push --set-upstream origin dev</code> –&gt; 建立当前分支与dev分支之间的跟踪关系</p>
<h4 id="7-分支合并有待细化"><a href="#7-分支合并有待细化" class="headerlink" title="7. 分支合并有待细化"></a>7. 分支合并<font color="red">有待细化</font></h4><p><code>git merge 分支x</code> 将分支x合并到当前分支</p>
<h4 id="8-分支切换"><a href="#8-分支切换" class="headerlink" title="8. 分支切换"></a>8. 分支切换</h4><p><code>git checkout 分支名</code></p>
<h3 id="三、忽略管理配置"><a href="#三、忽略管理配置" class="headerlink" title="三、忽略管理配置"></a>三、忽略管理配置</h3><p><code>.gitignore文件放在工作区的根目录下</code></p>
<img src="https://punchline-1301219142.cos.ap-nanjing.myqcloud.com/markdown-hexo/image-20210407214900166.png" alt="image-20210407214900166" style="zoom:50%;">





<p><strong>如果某个文件已经管理了，此时再进行忽略管理是失效的</strong> <strong>git 仍然可以追踪到变化</strong></p>
<p><strong>那不小心把某个文件管理起来了怎么办？</strong></p>
<ul>
<li><p>先将要忽略管理的文件备份下来</p>
</li>
<li><p>在本地仓库删除需要忽略管理的文件——&gt;产生删除变化</p>
</li>
<li><p>将删除变化push到远程仓库</p>
</li>
<li><p>将备份的文件赋值回本地仓库</p>
</li>
<li><p>修改<code>.gitignore</code>文件，忽略该文件</p>
</li>
<li><p>push到远程仓库即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Git的使用</category>
      </categories>
  </entry>
</search>
